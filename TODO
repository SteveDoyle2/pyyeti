d generic assemble array routine ? (a, b, …, c, ‘’, A, B, …C, ‘’, …)
    - base this off of scipy.linalg.block_diag ... or is there
      something there already?

1. Update duf explanation in cla.apply_uf

5. Convert ext, mx, mn in DR_Results to dataframe

6. rddmig needs profiling / updating for very large DMIGs

7. add wtdmig
   - add tests
   - beta in 0.93.6

12. op4: add some c?

15. cla.py:
    DR_Results() … should this be able to init? I think so:
                   DR_Results(drdefs, mission, event)
                   … similar to DR.prepare_results(mission, event)
                   … and/or, what about a DR_Def.prepare_results()
    ß actually, replace DR_Event.prepare_results() I think!!
                   Get rid of Info in DR_Event? Probably can’t because
                   of the uf_reds override.

    Naming convention should be more consistent:
      drdefs vs. Info vs. drminfo
         - Could they all be DR_Def instances??

         - Info can be a DR_Def instance ... but each drminfo is just
           a SimpleNamespace: a "value" in the DR_Def (or Info) dict

    - think about getting rid of DR_Event altogether ... just update
      a new DR_Def with all drdefs/dufs/ulvs's ... will this work?

    Be sure to update doctest for add_maxmin

    ~ DR_Def could be derived from dict or OrderedDict …
    “drdefs[cat]” seems better than “drdefs.dr_def[cat]”

    ~ Hmm … what about "class DR_Event(dict)"?
                   Nah, this one seems okay as is

    Update the code to better handle NaNs.
      - got a couple different methods going right now ... ??


~    1 resp_plots pdf filename -- this is the `onepdf` option i believe
    2 write complete test_cla.py
    3 magpct needs to be able to chop off small numbers

    4 when flagging, but no flags, format is shortened by one char for that column
    5 maybe add option to use only one figure ... that should be default ?

    6 y-axis label written far away in srs3/net_ifatm_0rb_eqsine_all.pdf plot ... why?
~    7 include documentation link for "load" and "save"
    8 Save eqsine to xlsx file

~16. op2 updates:
  - some functions should be "public", like _rdop2nt()
19. Add windowends to srs ?


21. In cb or cla:
    - In mk_net_drms, add use_g_units
    - make routine that returns string for adding data recovery categories for mk_net_drms output:
        """
        @cla.DR_Def.addcat
        def _():
            name = 'net_ifatm'
            ...
        ...
        """
        o   Could accept s/c name for description strings
        o   Or, make this just a function call? … that actually runs it?
            §  Would need defaults and maybe other inputs
            §  Could have it call mk_net_drms internally


23. ? Add option to change time step during simulation
    o   Save parameters in dictionary for each time step?
    o   Or, are the params cheap to recompute?
    Hmm ... would have to decide how to save results (even time steps?)


31. frf_apply_duf – see if needed and consider renaming (psd_apply_duf?)

32. cla:
    - Maybe should have capability to create null (zeros) category
      (with srs’s) … or just make sure zero case is accounted for in
      combination … hmm.

    - Form_extreme
       - Skip some events? (Like static and random, but include total)

    ~- Reldisp dtm: nodepairs -> node_pairs

    ~- bug: cbcheck -> cbcoordchk : bug if bset is last and we are not
      reordering (bref is relative to b+q size, but kbb is b size)

    ~- Nastran.mknast Stoponfatal should be bool

    XX - Change size(m, 1) to m.shape[1] (not just in cla.py)
     - changed my mind: it's not broke, and np.size(m, 1) is not the
       same as m.shape[1]

34. cb: Teach cbtf to handle 0 frequency case like solveunc.fsolve
    does.

36. cbreorder could take tuple of matrices ...

38. test_ntfl_rbdamping: figure this out:
    pre_eig = True doesn't work ... not sure why at the
    moment (maybe conflict with rb modes setting)

39. DR.add – should check for drms and nondrms … ?
    -  What about an easier way to just proceed without nas
       (if None, more actively make do without it … with
       warning maybe?)

41. Move find_center ?

~ 42. Rbmultchk – needs improving … what about b-set at the end?
    The assumptions about truncating won’t work right (right?)
    - fixed in version 0.93.8

43. Bref – what about a model with mechanisms?
    - let bref not be a mult of 6?

` 44. ? Update n2p.mkdofpv to be able to make a best effort (no raise on
    dofs not found … just trim output accordingly)
      - "strict" is the new argument
      - add tests
      - beta in version 0.93.6

` 45. Update op2.rdpostop2 to return the seconct card too
      - add tests
      - update help
      - beta in version 0.93.6

~ 46. Update the histogram routine in ytools: only check bins with data
      - version 0.93.6

~ 47. PP should print DataFrames better
      - version 0.93.7

48. add sparse Newmark solver

~49. Add LAMA to post op2 reader:

    # get system eigenvalues:
    with op2.OP2(sys_op2 + '.op2') as o2:
        fpos = o2.dbnames['LAMA'][0][0][0]
        o2._fileh.seek(fpos)
        nm, tr, tp = o2.rdop2nt()
        rec1 = o2.rdop2record(form='bytes')
        # rec2 = o2.rdop2record(form='bytes')
        # lama = np.frombuffer(rec2, np.float32)
        lama = o2.rdop2record(form='single').reshape(-1, 7)
    nas['lambda'][0] = lama[:, 2]

   - added in v0.93.7

~ 50. bug:
  from _cbcheck in cb.py:
    mxmqqerr is the diag-1 as calculated above, not the off-diag max?
  Should be something like this?:
    mxqqODerr=np.max(np.abs(mqq - np.diag(np.diag(mqq))))
  - Reported by David Hall
  - Fixed in v0.93.7

~ 51. Copyright 2015-2017, Tim Widrick. Created using Sphinx 1.7.5.

52.
   - In rdpostop2, matrix names should probably be lower case.
   - Add the “tf” class somewhere.
       o   After add “pade” …
   - Enhance the ‘seconct’ output (include ‘up’, ‘down’? … this is only down (I think)):

   p = op2.rdpostop2(sys_op2 + '.op2')
   seconct = {}
   j = 0
   for ind in (p['seconct'] == -1).nonzero()[0][::2]:
       seconct[p['seconct'][j]] = p['seconct'][j+8:ind][::2]
       j = ind + 2

   {101: array([     91,      92,      93, ..., 5907498, 5907499, 5907500], dtype=int32),
   102: array([1290001, 1290002, 1290003, ..., 1710100, 1710101, 1710102], dtype=int32),
   201: array([2000004, 2005283, 2005319, ..., 5924498, 5924499, 5924500], dtype=int32),
   609: array([7999031, 7999032, 7999033, ..., 9004098, 9004099, 9004100], dtype=int32)}

53. Implement the Chapman integrator

~ 54. cla.py uses subplots_adjust to account for legend ... I think
    tight_layout handles legends now.
    - fixed in version 0.93.8
    - replaced `sub_right` with `tight_layout_args`

~55. need option for 1 plot figure in doing cla comparison (and maybe
    in other places)
    - version 0.93.8

~ 56. rdtabled1 stores in dict with float ?
    - version 0.93.9

~ 57. Update locate.find_vals (and others?) to output bool
    o   Either instead or as an option
    - instead; version 0.93.9

58. Order of recovery should be maintained from definition order
     o   I think the only change (besides documenting that order is
         used) is to change this from:
            self.Info = {}
     o   To:
            self.Info = OrderedDict()
     o   In DR_Event.__init__

    But, for this to be really useful, we probably need to enhance
    calls to the drfuncs … would want access to other categories.
    Need some good ideas for this.
     o   Pass in the parent DR_Results … ?

~ 59. In reldisp_dtm, I have the labels documented backwards!
